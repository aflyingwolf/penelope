#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC = 
CFLAGS = -Wall
RESINC = 
LIBDIR = 
LIB = 
LDFLAGS = 

INC_DEBUG = $(INC)
CFLAGS_DEBUG = $(CFLAGS) -g
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS) -lpthread /usr/local/lib/libev.a /usr/local/lib/liblog4c.a /usr/local/lib/libhiredis.a
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG = 
OUT_DEBUG = bin/Debug/transmit

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O2
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s -lpthread /usr/local/lib/libev.a /usr/local/lib/liblog4c.a /usr/local/lib/libhiredis.a
OBJDIR_RELEASE = obj/Release
DEP_RELEASE = 
OUT_RELEASE = bin/Release/transmit

OBJ_DEBUG = $(OBJDIR_DEBUG)/web_socket.o $(OBJDIR_DEBUG)/user_state.o $(OBJDIR_DEBUG)/sha1.o $(OBJDIR_DEBUG)/room_state.o $(OBJDIR_DEBUG)/redis_pu.o $(OBJDIR_DEBUG)/main.o $(OBJDIR_DEBUG)/log4c_pu.o $(OBJDIR_DEBUG)/fd.o $(OBJDIR_DEBUG)/conn_queue.o $(OBJDIR_DEBUG)/client_function.o $(OBJDIR_DEBUG)/base64.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/web_socket.o $(OBJDIR_RELEASE)/user_state.o $(OBJDIR_RELEASE)/sha1.o $(OBJDIR_RELEASE)/room_state.o $(OBJDIR_RELEASE)/redis_pu.o $(OBJDIR_RELEASE)/main.o $(OBJDIR_RELEASE)/log4c_pu.o $(OBJDIR_RELEASE)/fd.o $(OBJDIR_RELEASE)/conn_queue.o $(OBJDIR_RELEASE)/client_function.o $(OBJDIR_RELEASE)/base64.o

all: debug release

clean: clean_debug clean_release

before_debug: 
	test -d bin/Debug || mkdir -p bin/Debug
	test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)

after_debug: 

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $(OBJ_DEBUG)  $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/web_socket.o: web_socket.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c web_socket.c -o $(OBJDIR_DEBUG)/web_socket.o

$(OBJDIR_DEBUG)/user_state.o: user_state.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c user_state.c -o $(OBJDIR_DEBUG)/user_state.o

$(OBJDIR_DEBUG)/sha1.o: sha1.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c sha1.c -o $(OBJDIR_DEBUG)/sha1.o

$(OBJDIR_DEBUG)/room_state.o: room_state.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c room_state.c -o $(OBJDIR_DEBUG)/room_state.o

$(OBJDIR_DEBUG)/redis_pu.o: redis_pu.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c redis_pu.c -o $(OBJDIR_DEBUG)/redis_pu.o

$(OBJDIR_DEBUG)/main.o: main.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c main.c -o $(OBJDIR_DEBUG)/main.o

$(OBJDIR_DEBUG)/log4c_pu.o: log4c_pu.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c log4c_pu.c -o $(OBJDIR_DEBUG)/log4c_pu.o

$(OBJDIR_DEBUG)/fd.o: fd.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c fd.c -o $(OBJDIR_DEBUG)/fd.o

$(OBJDIR_DEBUG)/conn_queue.o: conn_queue.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c conn_queue.c -o $(OBJDIR_DEBUG)/conn_queue.o

$(OBJDIR_DEBUG)/client_function.o: client_function.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c client_function.c -o $(OBJDIR_DEBUG)/client_function.o

$(OBJDIR_DEBUG)/base64.o: base64.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c base64.c -o $(OBJDIR_DEBUG)/base64.o

clean_debug: 
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf bin/Debug
	rm -rf $(OBJDIR_DEBUG)

before_release: 
	test -d bin/Release || mkdir -p bin/Release
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE)  $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/web_socket.o: web_socket.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c web_socket.c -o $(OBJDIR_RELEASE)/web_socket.o

$(OBJDIR_RELEASE)/user_state.o: user_state.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c user_state.c -o $(OBJDIR_RELEASE)/user_state.o

$(OBJDIR_RELEASE)/sha1.o: sha1.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c sha1.c -o $(OBJDIR_RELEASE)/sha1.o

$(OBJDIR_RELEASE)/room_state.o: room_state.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c room_state.c -o $(OBJDIR_RELEASE)/room_state.o

$(OBJDIR_RELEASE)/redis_pu.o: redis_pu.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c redis_pu.c -o $(OBJDIR_RELEASE)/redis_pu.o

$(OBJDIR_RELEASE)/main.o: main.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c main.c -o $(OBJDIR_RELEASE)/main.o

$(OBJDIR_RELEASE)/log4c_pu.o: log4c_pu.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c log4c_pu.c -o $(OBJDIR_RELEASE)/log4c_pu.o

$(OBJDIR_RELEASE)/fd.o: fd.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c fd.c -o $(OBJDIR_RELEASE)/fd.o

$(OBJDIR_RELEASE)/conn_queue.o: conn_queue.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c conn_queue.c -o $(OBJDIR_RELEASE)/conn_queue.o

$(OBJDIR_RELEASE)/client_function.o: client_function.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c client_function.c -o $(OBJDIR_RELEASE)/client_function.o

$(OBJDIR_RELEASE)/base64.o: base64.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c base64.c -o $(OBJDIR_RELEASE)/base64.o

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf bin/Release
	rm -rf $(OBJDIR_RELEASE)

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release

